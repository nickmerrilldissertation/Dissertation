`RESOURCES

Rich Hickey (2011). [Simple made easy](http://www.infoq.com/presentations/Simple-Made-Easy).

Rich Hickey (2010). [Hammock-driven development](https://www.youtube.com/watch?v=f84n5oFoZBc).

Brian Parkinson, A.S.R Manstead (1992). [Making sense of emotion in stories and social life](http://www.tandfonline.com/doi/abs/10.1080/02699939308409191#.Vd_TgCcViko)

Nick Merrill (2015). [Prototyping sensor-driven applications](http://coolworld.me/building-multiuser-sensor-apps/).

COMPLEMENTARY RESOURCES:

Mary Rose Cook (2013). [A practical introduction to functional programming](http://maryrosecook.com/blog/post/a-practical-introduction-to-functional-programming).

Sarah Watson (2014). [Metaphors of big data](http://dismagazine.com/discussion/73298/sara-m-watson-metaphors-of-big-data/)

substack (2014). [The stream handbook](https://github.com/substack/stream-handbook).

Nick Merrill (2015). [Streams for the damned](https://github.com/elsehow/streams-for-the-damned).

Eric Raymond. [The Art of Unix Programming, Chapter 1: Philosophy](http://www.faqs.org/docs/artu/ch01s06.html).

Neumeyer et al (2010). [S4: Distributed stream computing platform](http://web.stanford.edu/class/cs347/reading/S4PaperV2.pdf).

James Coglan (2014). [Practical functional programming](http://2014.jsconf.eu/speakers/james-coglan-practical-functional-programming-pick-two.html).





STREAMS   

motivate
	now, mouse clicks are not exactly sensor data - but they could be! look at how much informatino is  in them - the x, y, z,..... really this looks a LOT like what sensors look like. now why are mouse clicks a good example? because it makes it obvious that RANDOM things can happen to your stream. i can stop clicking!! will my system break? NO! This will happen ALL the time in your sensor projects (see: bad things)

(streams are not my idea, good idea from simulation and animation....how do these bear on us? and you can use these abstractions in your whole application, look here toward this talk, toward Streams for the damned, but here's 1 example.)
				
FAUCETS                 (a joke about leaky abstractions - do you know a leaky abstraction? ok, its where the implementation details "leak through." like cursors. well, faucets are totally transparent to the impelemntation details. in fact, tehre's no implementation. [show code]. it's just the underlying I/O, talking over the wire, whatever. so, is it even an abstraction? well, its underspecified! i leave the rest to you).

GOTCHAS					(gotta talk about what goes wrong....right up front....what our 'enemies' are so to speak)





# ACT I

## I Introduction

Last year John had the idea to record eeg data simultaneously froma room full of 60 people or so, we used the neurosky mind waves..... So it was my job to build all this. And I was the only programmer

Now, I planned all this stuff out, really detailed plans, and we all know, when you plan something out carefully enough, it works out just that way, right? .........No! That's never how it works! That's the one thing you know will *not* happen.

So, how do you plan? What do you plan? That's the spirit of this lecture. And i dont have a good answer! maybe in 10 years ill be able to come in here and speak with confidence about these decisions, but in the meantime, i'm a year and a half ahead of all of you if you're just starting down this road, and I'm sharing where i'm at myself. so we're in this together more or less

The name of this lecture is, Engineering sensor interactions for the lone ranger

who's the lone ranger? probably you!  [explicate]

but, this is about *enigneering* -- its *not* about designing, which is really more my job, or about researching what you candactually *do* with sensors, which is *really* my job......engineering is a means to an end, so how do you make it work *for* you without going crazy in the details?

when i was preparing for this project, i read a lot of stuff, rich hickeys talks especially which you should ALL watch if you plan on building any sort of system, but of EVERYTHING i read, the thing that stuck with me most was the sheet music for Giant Steps by John Coltraine. [slide] who here has heard giant steps? [more notes than are written down]

UNDER-specifying.

the details of the implementation will fill out the rest of the notes. random specifications that pop out of nowhere, like "oh this system only runs x," "y doesnt work", "this sensor randomly breaks sometimes in this way" (thats a big one) - complexity COMES IN

but complexity doesnt mean it has to become complicated. is giant steps complicated? NO! Look at it!
it might SOUND complicated, but what keepes it COMPLEX (but not complicated) is this simple notation, that brings you back to the core meaning,, the core of the exercise, the system, the melody

..

so the question becomes, what are the notes you write down?

## II What I did

[write this]

## III The problems I faced at the end of it

[admin dashboard indicative of further problems]

THEN, john wanted me to create an onlien passthoughts system [explain passthoughts]

so, is this goign to work in a simple way given teh system we already have?

....

unclear! we'd definitely have to be hitting disk a lot. we'd have to be hitting disk *to know if we SHOULD be hitting disk*, and this is a huge limitation. so i had to go back to the drawing board. but first..........


# ACT II

## I Earthquake & feelings



# ACT III

indra today

[introduce the indra quote]

something that guided me way way back, before i came up with this architecture, back in the original design of the project.

[now into the insight about FACUETS] 

[my discovery of S4]

[the idea of the "roughly heirarchical flow"]

[and the ultimately very simple arhcitecture i came up with]


[through to the implemntation with pusher]

and some of the code i wrote, how it works in both js/python
which parts you can read and compose


## SOME FINAL THOUGHTS

"The 'dream' of every cell is to become two cells."

- Fran√ßois Jacob

"The 'dream' of every system is to be composed into a larger system."

- me


Design to be composed. Underspecifying affords you the "blank space" to let other people fill in some notes. It's this filling in the notes that let's your implementations get re-used in multiple contexts. 

Coming up with a pattern language is hard. I thought I came up with one, but it turned out to be a reiteration of differnet ideas that go back to the early days. And that's fine. Telling the pattern in a new way is still important and valid. Sometimes telling it in JavaScript and Python instead of Java and C is important. If you can come up with a pattern language that's composable and reusable, and you can see it working in different contexts, that's great, that's one of the best things a programmer can do. It might be 20 lines to execute it, that's all the better!


# IV EXERCISE

have them design conversation clock

# V FIN
mention im speaking in 213, about sensors + about UIs, secretly both are about sensors...
